#######################################################
# 
# Project.py
# Python implementation of the Class Project
# Generated by Enterprise Architect
# Created on:      01-juil.-2013 20:46:13
# Original author: Romain
# 
#######################################################
from Node import *
from Pipeline import *
import pickle

class Box(Node):

	def __init__(self, name, linkManager, shaderType) :
		Node.__init__(self, 0, shaderType)
		self.nodeList = []
		self.name = name
		self.linkList = []
		self.linkManager = linkManager
		self.uniforms = {}
		self.pipeline = Pipeline.getPipelineVars(self)
	
	def getNodeList(self) :
		return self.nodeList
	
	def getUniforms(self) :
		return self.uniforms
	
	def clear(self) :
		self.nodeList = []
		
	def addNode(self, node, pos) :
		if node.getType() == 0 :
			self.linkList = self.linkList + node.getLinkList()
			#node.setLinkList([])
		node.setLinkManager(self.linkManager)
		self.nodeList.insert(pos, node)
	
	def appendNode(self, node) :
		if node.getType() == 0 :
			self.linkList = self.linkList + node.getLinkList()
			#node.setLinkList([])
		node.setLinkManager(self.linkManager)
		self.nodeList.append(node)
	
	def removeNode(self, node) :
		self.nodeList.pop(self.nodeList.index(node))
		
	def removeNodeAt(self, pos) :
		self.nodeList.pop(pos)
	
	def addInVar(self, name, type) :
		self.inVars[name] = Var(name, self, VarType.IN, type)
		return self.inVars[name]
		
	def addOutVar(self, name, type) :
		self.outVars[name] = Var(name, self, VarType.OUT, type)
		return self.outVars[name]
	
	def addUniform(self, name, value, type) :
		self.uniforms[name] = Var(name, self, VarType.UNI, type, value)
		return self.uniforms[name]
		
	def getUniform(self, name) :
		return self.uniforms[name]
		
	def getPipelineVar(self, name) :
		return self.pipeline[name]
	
	def save(self, name) :
		outfile = open(name, "wb")
		pickle.dump(self, outfile)
		outfile.close()
	
	def load(self, name) :
		infile = open(name, "rb")
		tmp = pickle.load(infile)
		return tmp
	
	def printListName(self) :
		print 'Box : ' + self.name + ', Nodes Name: '
		for node in self.nodeList :
			if node.getType() == 0 :
				node.printListName()
			else :
				node.printName()
			